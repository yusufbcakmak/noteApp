/**
 * Auto-generated API client from OpenAPI specification
 * Generated on: 2025-08-15T08:11:39.139Z
 * 
 * DO NOT EDIT THIS FILE MANUALLY
 */

import { ApiResponse, PaginatedResponse } from '../types/api';

export interface ApiClientConfig {
  baseURL?: string;
  timeout?: number;
  headers?: Record<string, string>;
}

export class ApiClient {
  private baseURL: string;
  private timeout: number;
  private defaultHeaders: Record<string, string>;
  private token: string | null = null;

  constructor(config: ApiClientConfig = {}) {
    this.baseURL = config.baseURL || 'http://localhost:3000';
    this.timeout = config.timeout || 10000;
    this.defaultHeaders = {
      'Content-Type': 'application/json',
      ...config.headers
    };
  }

  /**
   * Set authentication token
   */
  setToken(token: string) {
    this.token = token;
  }

  /**
   * Clear authentication token
   */
  clearToken() {
    this.token = null;
  }

  /**
   * Make HTTP request
   */
  private async request<T = any>(
    method: string,
    path: string,
    options: {
      params?: Record<string, any>;
      data?: any;
      headers?: Record<string, string>;
    } = {}
  ): Promise<ApiResponse<T>> {
    const url = new URL(path, this.baseURL);
    
    // Add query parameters
    if (options.params) {
      Object.entries(options.params).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          url.searchParams.append(key, String(value));
        }
      });
    }

    const headers = {
      ...this.defaultHeaders,
      ...options.headers
    };

    // Add authorization header if token is set
    if (this.token) {
      headers.Authorization = `Bearer ${this.token}`;
    }

    const requestOptions: RequestInit = {
      method,
      headers,
    };

    // Add request body for non-GET requests
    if (options.data && method !== 'GET') {
      requestOptions.body = JSON.stringify(options.data);
    }

    try {
      const response = await fetch(url.toString(), requestOptions);
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error?.message || `HTTP ${response.status}`);
      }

      return data;
    } catch (error) {
      throw new Error(`API request failed: ${error.message}`);
    }
  }

  // Authentication methods
  async login(credentials: { email: string; password: string }) {
    return this.request('POST', '/api/auth/login', { data: credentials });
  }

  async register(userData: { email: string; password: string; firstName: string; lastName: string }) {
    return this.request('POST', '/api/auth/register', { data: userData });
  }

  async getCurrentUser() {
    return this.request('GET', '/api/auth/me');
  }

  // Notes methods
  async getNotes(params?: {
    page?: number;
    limit?: number;
    status?: string;
    priority?: string;
    groupId?: string;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
  }): Promise<PaginatedResponse> {
    return this.request('GET', '/api/notes', { params });
  }

  async createNote(noteData: {
    title: string;
    description?: string;
    priority?: string;
    groupId?: string;
  }) {
    return this.request('POST', '/api/notes', { data: noteData });
  }

  async getNote(id: string) {
    return this.request('GET', `/api/notes/${id}`);
  }

  async updateNote(id: string, updates: {
    title?: string;
    description?: string;
    status?: string;
    priority?: string;
    groupId?: string;
  }) {
    return this.request('PUT', `/api/notes/${id}`, { data: updates });
  }

  async deleteNote(id: string) {
    return this.request('DELETE', `/api/notes/${id}`);
  }

  async updateNoteStatus(id: string, status: string) {
    return this.request('PATCH', `/api/notes/${id}/status`, { data: { status } });
  }

  // Groups methods
  async getGroups(params?: {
    page?: number;
    limit?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
  }): Promise<PaginatedResponse> {
    return this.request('GET', '/api/groups', { params });
  }

  async createGroup(groupData: {
    name: string;
    description?: string;
    color?: string;
  }) {
    return this.request('POST', '/api/groups', { data: groupData });
  }

  async getGroup(id: string) {
    return this.request('GET', `/api/groups/${id}`);
  }

  async updateGroup(id: string, updates: {
    name?: string;
    description?: string;
    color?: string;
  }) {
    return this.request('PUT', `/api/groups/${id}`, { data: updates });
  }

  async deleteGroup(id: string) {
    return this.request('DELETE', `/api/groups/${id}`);
  }

  // History methods
  async getHistory(params?: {
    page?: number;
    limit?: number;
    startDate?: string;
    endDate?: string;
    sortBy?: string;
    sortOrder?: string;
  }): Promise<PaginatedResponse> {
    return this.request('GET', '/api/history', { params });
  }

  async getDailyStats(params?: {
    date?: string;
    days?: number;
  }) {
    return this.request('GET', '/api/history/daily', { params });
  }

  // User methods
  async getUserProfile() {
    return this.request('GET', '/api/user/profile');
  }

  async updateUserProfile(updates: {
    firstName?: string;
    lastName?: string;
    email?: string;
    currentPassword?: string;
    newPassword?: string;
  }) {
    return this.request('PUT', '/api/user/profile', { data: updates });
  }

  async deleteAccount(confirmation: {
    password: string;
    confirmation: string;
  }) {
    return this.request('DELETE', '/api/user/account', { data: confirmation });
  }
}

// Create default instance
export const apiClient = new ApiClient();

export default apiClient;
